$date
	Thu Apr 19 19:45:57 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb_CacheModel $end
$scope module uut $end
$var wire 8 ! address [7:0] $end
$var wire 1 " clk $end
$var wire 1 # l1d_update $end
$var wire 1 $ l1i_update $end
$var wire 32 % l1i_write_data [31:0] $end
$var wire 1 & l1i_write_en $end
$var wire 1 ' l2_update $end
$var wire 1 ( mm_read_en $end
$var wire 1 ) report $end
$var wire 1 * rst $end
$var wire 32 + write_data [31:0] $end
$var wire 1 , write_en $end
$var wire 32 - read_data [31:0] $end
$var wire 1 . mm_write_en $end
$var wire 32 / mm_read_data [31:0] $end
$var wire 1 0 l2_write_en $end
$var wire 32 1 l2_write_data [31:0] $end
$var wire 32 2 l2_read_data [31:0] $end
$var wire 1 3 l2_hit $end
$var wire 32 4 l1i_read_data [31:0] $end
$var wire 1 5 l1i_hit $end
$var wire 1 6 l1d_write_en $end
$var wire 32 7 l1d_write_data [31:0] $end
$var wire 32 8 l1d_read_data [31:0] $end
$var wire 1 9 l1d_hit $end
$scope module l1dcache $end
$var wire 8 : address [7:0] $end
$var wire 1 " clk $end
$var wire 1 9 hit $end
$var wire 32 ; read_data [31:0] $end
$var wire 1 * rst $end
$var wire 1 # update $end
$var wire 32 < write_data [31:0] $end
$var wire 1 6 write_en $end
$var wire 5 = tag [4:0] $end
$var wire 2 > index [1:0] $end
$var wire 1 ? block_offset $end
$var reg 4 @ valid [3:0] $end
$upscope $end
$scope module l1icache $end
$var wire 8 A address [7:0] $end
$var wire 1 " clk $end
$var wire 1 5 hit $end
$var wire 32 B read_data [31:0] $end
$var wire 1 * rst $end
$var wire 1 $ update $end
$var wire 32 C write_data [31:0] $end
$var wire 1 & write_en $end
$var wire 5 D tag [4:0] $end
$var wire 2 E index [1:0] $end
$var wire 1 F block_offset $end
$var reg 4 G valid [3:0] $end
$upscope $end
$scope module l2cache $end
$var wire 8 H address [7:0] $end
$var wire 1 " clk $end
$var wire 1 3 hit $end
$var wire 32 I read_data [31:0] $end
$var wire 1 * rst $end
$var wire 1 ' update $end
$var wire 32 J write_data [31:0] $end
$var wire 1 0 write_en $end
$var wire 4 K tag [3:0] $end
$var wire 3 L index [2:0] $end
$var wire 1 M block_offset $end
$var reg 8 N valid [7:0] $end
$upscope $end
$scope module main_memory $end
$var wire 1 " clock $end
$var wire 8 O readAddress [7:0] $end
$var wire 1 ( readEnable $end
$var wire 1 ) report $end
$var wire 1 * reset $end
$var wire 8 P writeAddress [7:0] $end
$var wire 32 Q writeData [31:0] $end
$var wire 1 , writeEnable $end
$var wire 32 R readData [31:0] $end
$var reg 32 S cycles [31:0] $end
$scope begin RAM_WRITE $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb_CacheModel $end
$scope module uut $end
$scope module l1dcache $end
$var reg 32 T \cachemem[0] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb_CacheModel $end
$scope module uut $end
$scope module l1dcache $end
$var reg 32 U \cachemem[1] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb_CacheModel $end
$scope module uut $end
$scope module l2cache $end
$var reg 32 V \cachemem[0] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb_CacheModel $end
$scope module uut $end
$scope module l2cache $end
$var reg 32 W \cachemem[1] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb_CacheModel $end
$scope module uut $end
$scope module l2cache $end
$var reg 32 X \cachemem[8] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb_CacheModel $end
$scope module uut $end
$scope module l2cache $end
$var reg 32 Y \cachemem[9] [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb_CacheModel $end
$scope module uut $end
$scope module l1dcache $end
$var reg 5 Z \tags[0] [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb_CacheModel $end
$scope module uut $end
$scope module l1dcache $end
$var reg 5 [ \tags[1] [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb_CacheModel $end
$scope module uut $end
$scope module l2cache $end
$var reg 4 \ \tags[0] [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb_CacheModel $end
$scope module uut $end
$scope module l2cache $end
$var reg 4 ] \tags[1] [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
b0 S
bx R
b101010111100110111101111 Q
bx P
bx O
b0 N
xM
bx L
bx K
bx J
bx I
bx H
b0 G
xF
bx E
bx D
bz C
bx B
bx A
b0 @
x?
bx >
bx =
bx <
bx ;
bx :
x9
bx 8
bx 7
06
x5
bx 4
x3
bx 2
bx 1
00
bx /
0.
bx -
0,
b101010111100110111101111 +
1*
0)
1(
x'
z&
bz %
z$
x#
1"
bx !
$end
#1
0"
#2
1"
#3
0"
#4
1"
#5
0"
#6
1"
#7
0"
#8
1"
#9
0"
#10
b1 S
b111010010011 7
b111010010011 <
1#
1'
b111010010011 -
09
05
03
b111010010011 1
b111010010011 J
b100 =
0?
b0 >
b100 D
0F
b0 E
b10 K
0M
b0 L
b111010010011 /
b111010010011 R
1"
b100000 !
b100000 :
b100000 A
b100000 H
b100000 O
b100000 P
0*
#11
0"
#12
b101010111100110111101111 7
b101010111100110111101111 <
0#
b101010111100110111101111 1
b101010111100110111101111 J
0'
19
13
b1 @
b100 Z
b111010010011 T
b111010010011 8
b111010010011 ;
b1 N
b10 \
b111010010011 V
b111010010011 2
b111010010011 I
b10 S
1"
#13
0"
#14
b11 S
b10011 7
b10011 <
1#
b10011 1
b10011 J
1'
b10011 -
09
03
b101 =
b101 D
bx 2
bx I
b100 L
b10011 /
b10011 R
1"
b101000 !
b101000 :
b101000 A
b101000 H
b101000 O
b101000 P
#15
0"
#16
b101010111100110111101111 7
b101010111100110111101111 <
0#
b101010111100110111101111 1
b101010111100110111101111 J
0'
19
13
b101 Z
b10011 T
b10011 8
b10011 ;
b10001 N
b10011 X
b10011 2
b10011 I
b100 S
1"
#17
0"
#18
b101 S
b111010010011 7
b111010010011 <
1#
b111010010011 -
09
b100 =
b100 D
b111010010011 2
b111010010011 I
b0 L
b111010010011 /
b111010010011 R
1"
b100000 !
b100000 :
b100000 A
b100000 H
b100000 O
b100000 P
#19
0"
#20
b101010111100110111101111 7
b101010111100110111101111 <
0#
19
b100 Z
b111010010011 T
b111010010011 8
b111010010011 ;
b110 S
1"
#21
0"
#22
b111 S
1"
#23
0"
#24
b1000 S
1"
#25
0"
#26
b1001 S
1"
#27
0"
#28
b1010 S
b101010111100110111101111 /
b101010111100110111101111 R
16
10
1.
1"
1,
#29
0"
#30
b101010111100110111101111 -
b1011 S
b10 \
b101010111100110111101111 V
b101010111100110111101111 2
b101010111100110111101111 I
b100 Z
b101010111100110111101111 T
b101010111100110111101111 8
b101010111100110111101111 ;
1"
#31
0"
#32
b10010001101000101 X
b1100 S
b10010001101000101 -
09
b101 =
b101 D
b10010001101000101 2
b10010001101000101 I
b100 L
b10010001101000101 7
b10010001101000101 <
b10010001101000101 1
b10010001101000101 J
b10010001101000101 /
b10010001101000101 R
1"
b101000 !
b101000 :
b101000 A
b101000 H
b101000 O
b101000 P
b10010001101000101 +
b10010001101000101 Q
#33
0"
#34
b1101 S
b10010001101000101 X
1"
#35
0"
#36
b10010001101000101 X
b1110 S
1"
#37
0"
#38
b1111 S
b10010001101000101 X
1"
#39
0"
#40
b10010001101000101 X
b10000 S
1"
#41
0"
#42
b10001 S
b10010001101000101 X
1"
